#!/usr/bin/env python3
# -*- mode: python -*-
# -*- coding: utf-8 -*-

##
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from datetime import date, datetime, time, timedelta
from decimal import Decimal
from io import BytesIO
from typing import *

from avro.schema import Schema
from avro.types import *

class BinaryDecoder:
    def __init__(self, reader: BytesIO) -> None:
        ...
    @property
    def reader(self) -> BytesIO:
        ...
    def read(self, n: int) -> bytes:
        ...
    def read_null(self) -> None:
        ...
    def read_boolean(self) -> bool:
        ...
    def read_int(self) -> int:
        ...
    def read_long(self) -> int:
        ...
    def read_float(self) -> float:
        ...
    def read_double(self) -> float:
        ...
    def read_decimal_from_bytes(self, precision: int, scale: int) -> Decimal:
        ...
    def read_decimal_from_fixed(self, precision: int, scale: int, size: int) -> Decimal:
        ...
    def read_bytes(self) -> bytes:
        ...
    def read_utf8(self) -> str:
        ...
    def read_date_from_int(self) -> date:
        ...
    def _build_time_object(self, value: int, scale_to_micro: int) -> time:
        ...
    def read_time_millis_from_int(self) -> time:
        ...
    def read_time_micros_from_long(self) -> time:
        ...
    def read_timestamp_millis_from_long(self) -> datetime:
        ...
    def read_timestamp_micros_from_long(self) -> datetime:
        ...
    def skip_null(self) -> None:
        ...
    def skip_boolean(self) -> None:
        ...
    def skip_int(self) -> None:
        ...
    def skip_long(self) -> None:
        ...
    def skip_float(self) -> None:
        ...
    def skip_double(self) -> None:
        ...
    def skip_bytes(self) -> None:
        ...
    def skip_utf8(self) -> None:
        ...
    def skip(self, n: int) -> None:
        ...


class BinaryEncoder:
    def __init__(self, writer: BytesIO) -> None:
        ...
    @property
    def writer(self) -> BytesIO:
        ...
    def write(self, datum: AvroAny) -> None:
        ...
    def write_null(self, datum: AvroAny) -> None:
        ...
    def write_boolean(self, datum: AvroAny) -> None:
        ...
    def write_int(self, datum: AvroAny) -> None:
        ...
    def write_long(self, datum: AvroAny) -> None:
        ...
    def write_float(self, datum: AvroAny) -> None:
        ...
    def write_double(self, datum: AvroAny) -> None:
        ...
    def write_decimal_bytes(self, datum: AvroAny, scale: int) -> None:
        ...
    def write_decimal_fixed(self, datum: AvroAny, scale: int, size: int) -> None:
        ...
    def write_bytes(self, datum: AvroAny) -> None:
        ...
    def write_utf8(self, datum: AvroAny) -> None:
        ...
    def write_date_int(self, datum: AvroAny) -> None:
        ...
    def write_time_millis_int(self, datum: AvroAny) -> None:
        ...
    def write_time_micros_long(self, datum: AvroAny) -> None:
        ...
    def _timedelta_total_microseconds(self, timedelta: timedelta) -> int:
        ...
    def write_timestamp_millis_long(self, datum: AvroAny) -> None:
        ...
    def write_timestamp_micros_long(self, datum: AvroAny) -> None:
        ...

class DatumReader:
    def __init__(self, writers_schema: Optional[Schema]=None, readers_schema: Optional[Schema]=None) -> None:
        ...
    @property
    def writers_schema(self) -> Schema:
        ...
    @writers_schema.setter
    def writers_schema(self, schema: Schema) -> None:
        ...
    @property
    def readers_schema(self) -> Schema:
        ...
    @readers_schema.setter
    def readers_schema(self, schema: Schema) -> None:
        ...
    def read(self, decoder: BinaryDecoder) -> AvroAny:
        ...
    def read_data(self, writers_schema: Schema, readers_schema: Schema, decoder: BinaryDecoder) -> AvroAny:
        ...
    def read_fixed(self, writers_schema: Schema, readers_schema: Schema, decoder: BinaryDecoder) -> bytes:
        ...
    def read_enum(self, writers_schema: Schema, readers_schema: Schema, decoder: BinaryDecoder) -> str:
        ...
    def read_array(self, writers_schema: Schema, readers_schema: Schema, decoder: BinaryDecoder) -> List[AvroAny]:
        ...
    def read_map(self, writers_schema: Schema, readers_schema: Schema, decoder: BinaryDecoder) -> Dict[str, AvroAny]:
        ...
    def read_union(self, writers_schema: Schema, readers_schema: Schema, decoder: BinaryDecoder) -> AvroAny:
        ...
    def read_record(self, writers_schema: Schema, readers_schema: Schema, decoder: BinaryDecoder) -> Dict[str, AvroAny]:
        ...
    def _read_default_value(self, field_schema: Schema, default_value: AvroAny) -> AvroAny:
        ...
    def skip_data(self, writers_schema: Schema, decoder: BinaryDecoder) -> None:
        ...
    def skip_fixed(self, writers_schema: Schema, decoder: BinaryDecoder) -> None:
        ...
    def skip_enum(self, writers_schema: Schema, decoder: BinaryDecoder) -> None:
        ...
    def skip_array(self, writers_schema: Schema, decoder: BinaryDecoder) -> None:
        ...
    def skip_map(self, writers_schema: Schema, decoder: BinaryDecoder) -> None:
        ...
    def skip_union(self, writers_schema: Schema, decoder: BinaryDecoder) -> None:
        ...
    def skip_record(self, writers_schema: Schema, decoder: BinaryDecoder) -> None:
        ...

class DatumWriter:
    def __init__(self, writers_schema: Optional[Schema]=None) -> None:
        ...
    @property
    def writers_schema(self) -> Schema:
        ...
    @writers_schema.setter
    def writers_schema(self, schema: Schema) -> None:
        ...
    def write(self, datum: AvroAny, encoder: BinaryEncoder) -> None:
        ...
    def write_data(self, writers_schema: Schema, datum: AvroAny, encoder: BinaryEncoder) -> None:
        ...
    def write_fixed(self, writers_schema: Schema, datum: AvroAny, encoder: BinaryEncoder) -> None:
        ...
    def write_enum(self, writers_schema: Schema, datum: AvroAny, encoder: BinaryEncoder) -> None:
        ...
    def write_array(self, writers_schema: Schema, datum: AvroAny, encoder: BinaryEncoder) -> None:
        ...
    def write_map(self, writers_schema: Schema, datum: AvroAny, encoder: BinaryEncoder) -> None:
        ...
    def write_union(self, writers_schema: Schema, datum: AvroAny, encoder: BinaryEncoder) -> None:
        ...
    def write_record(self, writers_schema: Schema, datum: AvroAny, encoder: BinaryEncoder) -> None:
        ...
